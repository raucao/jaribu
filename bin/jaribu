#!/usr/bin/env node
// -*- mode:js; js-indent-level:2 -*-

(function (undefined) {
  "use strict";

  var walk           = require('walk');
  var files          = [];
  var cwd            = process.cwd();
  var argv           = process.argv.slice(2);
  var requestedFiles = null;

  var jaribuDir = __dirname+"/../";
  var appDir = __dirname+"/../";
  if (__dirname.match(/node_modules\/jaribu\/bin$/)) {
    // we're a node module, set the require root
    // to the root of the app, not this module.
    appDir = __dirname+"/../../../";
  }
  console.log('jaribu is in:' + jaribuDir);
  console.log('app is in:' + appDir);
  var requirejs = require('requirejs');
  requirejs.config({
    //Pass the top-level main.js/index.js require
    //function to requirejs so that node modules
    //are loaded relative to the top-level JS file.
    baseUrl: appDir,
    paths: {
      jaribu: jaribuDir,
      'jaribu/colors': './lib/colors', 
      'jaribu/display': './lib/display', 
      'jaribu/tools/Env': './lib/tools/Env',
      'jaribu/Scaffolding': './lib/Scaffolding', 
      'jaribu/Test': './lib/Test', 
      'jaribu/Suite': './lib/Suite',
      'jaribu/helpers': './lib/helpers',
      'jaribu/tools/Write': './lib/tools/Write', 
      'jaribu/tools/result': './lib/tools/result',
      'jaribu/tools/assert': './lib/tools/assert', 
      'jaribu/tools/assertType': './lib/tools/assertType', 
      'jaribu/fakes/Stub': './lib/fakes/Stub', 
      'jaribu/fakes/remoteStorageMock': './lib/fakes/remoteStorageMock',
      'jaribu/tools/HttpServer': './lib/tools/HttpServer', 
      'jaribu/tools/Throws': './lib/tools/Throws',
      'jaribu/tools/WebSocketClient': './lib/tools/WebSocketClient', 
      'jaribu/tools/WebSocketServer': './lib/tools/WebSocketServer',
      'jaribu/testlib2': './lib/testlib2'
    },
    nodeRequire: require
  });

  if(argv.length > 0) {
    requestedFiles = {};
    argv.forEach(function(arg) {
      var path = arg[0] == '/' ? arg : (cwd + '/' + arg);
      requestedFiles[path] = true;
    });
  }

  // Walker options
  var walker  = walk.walk(cwd+'/test', { followLinks: false });

  walker.on('file', function (root, stat, next) {
    var path = root + '/' + stat.name;
    if (stat.name.match(/\-suite\.js$/g)) {
      // Add this file to the list of files
      if((! requestedFiles) || requestedFiles[path]) {
        files.push(path);
      }
    } else if ((requestedFiles) && (requestedFiles[path])) {
        files.push(path);
    }
    next();
  });

  walker.on('end', function () {
    var i, n;
    files = files.sort();
    console.log(files);

    var sys = require('util');
    var jaribu = requirejs('jaribu/lib/jaribu');
    var failedToLoad = [];

    var len_files = files.length;
    if (files.length === 0) {
      console.log('no tests found to run');
      return;
    }

    for (i = 0; i < len_files; i += 1) {
      var s = requirejs(files[i]);
      var suites = [];

      if (typeof s === 'undefined') {
        console.error("expected an array of tests, but got 'undefined' from file: "+files[i]);
        failedToLoad.push({'desc':files[i], 'error': 'unable to read suite data from file'});
        continue;
      } else if ((s.hasOwnProperty('name')) && (typeof s.name !== 'undefined')) {
        suites.push(s);
      } else {
        suites = s;
      }

      var num_suites = suites.length;
      for (n = 0; n < num_suites; n += 1) {
        if (! jaribu.loadSuite(suites[n]) ) {
          console.error("\n"+'unable to load suite: ' + suites[n].desc);
          console.error(jaribu.getErrorMessage());
          failedToLoad.push({'desc':suites[n].desc, 'error': jaribu.getErrorMessage()});
        }
      }
    }
    jaribu.begin(function() {
      // on complete
      var i;
      console.log('---');
      var num_failedToLoad = failedToLoad.length;
      for (i = 0; i < num_failedToLoad; i += 1) {
        console.log("\nsuite failed to load: " + failedToLoad[i].desc);
        console.log(failedToLoad[i].error);
      }
      console.log("\n");
    });
  });
}());